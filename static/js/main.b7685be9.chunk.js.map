{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","employees","term","searchHandler","bind","event","this","setState","target","value","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","onChange","placeholder","filter","x","name","last","toLowerCase","includes","searchFor","map","employee","scope","key","email","src","picture","medium","alt","first","cell","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"m7oNA2FeA,E,kDA5Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,UAAWA,EACXC,KAAM,IAER,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBAPJ,E,0DAULC,GACZC,KAAKC,SAAS,CAAEL,KAAMG,EAAMG,OAAOC,U,+BAG3B,IAAD,EACqBH,KAAKN,MAAzBE,EADD,EACCA,KAAMD,EADP,EACOA,UACd,OACE,8BACE,yBAAKS,UAAU,OACb,gCACE,yBAAKA,UAAU,yDACb,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,sBACA,4BAAQD,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,kBAAkBC,gBAAc,iBAAiBC,gBAAc,QAAQC,aAAW,qBACpK,0BAAMP,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BQ,GAAG,kBAC3C,wBAAIR,UAAU,sBACZ,wBAAIA,UAAU,qBAIhB,0BAAMA,UAAU,4BACd,2BAAOA,UAAU,uBAAuBE,KAAK,OAAOO,SAAUb,KAAKH,cAAeM,MAAOP,EAAMkB,YAAY,sBAAsBH,aAAW,eAOlJhB,EAAUoB,OAhDtB,SAAmBnB,GACjB,OAAO,SAAUoB,GACf,OAAOA,EAAEC,KAAKC,KAAKC,cAAcC,SAASxB,EAAKuB,iBAAmBvB,GA8CzCyB,CAAUzB,IAAO0B,KAAI,SAAAC,GAAQ,OAI5C,2BAAOnB,UAAU,SACf,+BACN,4BACE,wBAAIoB,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,cACA,wBAAIA,MAAM,OAAV,aACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,WAGI,+BAEE,wBAAIC,IAAKF,EAASG,OAChB,4BAAI,yBAAKC,IAAKJ,EAASK,QAAQC,OAAQC,IAAI,0BAC3C,4BAAKP,EAASN,KAAKc,OACnB,4BAAKR,EAASN,KAAKC,MACnB,4BAAKK,EAASS,MACd,4BAAKT,EAASG,mB,GA7DhBO,aCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b7685be9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport employees from \"./employees.json\"\n\n\n\nfunction searchFor(term) {\n  return function (x) {\n    return x.name.last.toLowerCase().includes(term.toLowerCase()) || !term;\n\n  }\n}\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      employees: employees,\n      term: '',\n    }\n    this.searchHandler = this.searchHandler.bind(this);\n  }\n\n  searchHandler(event) {\n    this.setState({ term: event.target.value })\n  }\n\n  render() {\n    const { term, employees } = this.state;\n    return (\n      <main>\n        <div className=\"App\">\n          <header>\n            <nav className=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\">\n              <a className=\"navbar-brand\" href=\"#\">Employee Directory</a>\n              <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarCollapse\" aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n              </button>\n              <div className=\"collapse navbar-collapse\" id=\"navbarCollapse\">\n                <ul className=\"navbar-nav mr-auto\">\n                  <li className=\"nav-item active\">\n                  </li>\n\n                </ul>\n                <form className=\"form-inline mt-2 mt-md-0\">\n                  <input className=\"form-control mr-sm-2\" type=\"text\" onChange={this.searchHandler} value={term} placeholder=\"Search by Last Name\" aria-label=\"Search\" />\n                  \n                </form>\n              </div>\n            </nav>\n          </header>\n          {\n            employees.filter(searchFor(term)).map(employee =>\n              // employees.filter(searchFor(term)).map( employee =>       \n              //entering (term) creates the \"cannot read tolowercase error\"\n\n              <table className=\"table\">\n                <thead>\n          <tr>\n            <th scope=\"col\">Photo</th>\n            <th scope=\"col\">First Name</th>\n            <th scope=\"col\">Last Name</th>\n            <th scope=\"col\">Phone</th>\n            <th scope=\"col\">Email</th>\n          </tr>\n        </thead>\n                <tbody>\n\n                  <tr key={employee.email}>\n                    <td><img src={employee.picture.medium} alt=\"No picture available\"></img></td>\n                    <td>{employee.name.first}</td>\n                    <td>{employee.name.last}</td>\n                    <td>{employee.cell}</td>\n                    <td>{employee.email}</td>\n                  </tr>\n\n\n\n                </tbody>\n              </table>\n            )\n          }\n\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}